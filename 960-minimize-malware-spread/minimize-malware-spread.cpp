#include <bits/stdc++.h>
using namespace std;
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size(), cid = 0;
        vector<int> comp(n, -1);
        function<void(int, int)> dfs = [&](int u, int cur) {
            comp[u] = cur;
            for (int v = 0; v < n; v++)
                if (graph[u][v] && comp[v] == -1)
                    dfs(v, cur);
        };
        for (int i = 0; i < n; i++)
            if (comp[i] == -1)
                dfs(i, cid++);
        vector<int> compSize(cid, 0);
        for (int i = 0; i < n; i++) compSize[comp[i]]++;
        vector<int> compInfected(cid, 0);
        for (int node : initial) compInfected[comp[node]]++;
        sort(initial.begin(), initial.end());
        int ans = -1, maxSaved = -1;
        for (int node : initial) {
            int c = comp[node];
            if (compInfected[c] == 1 && compSize[c] > maxSaved) {
                maxSaved = compSize[c];
                ans = node;
            }
        }
        return ans == -1 ? initial[0] : ans;
    }
}; 